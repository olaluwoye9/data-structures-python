{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Welcome to data-structures-python This is a beginner-friendly project to help you understand how core data structures work, by implementing them from scratch in Python. Use the sidebar to explore structures like Stacks, Queues, Trees, and Graphs. Explore the sidebar for usage and explanation of: - Arrays - Stacks - Queues - Linked Lists - Trees - Graphs","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#welcome-to-data-structures-python","text":"This is a beginner-friendly project to help you understand how core data structures work, by implementing them from scratch in Python. Use the sidebar to explore structures like Stacks, Queues, Trees, and Graphs. Explore the sidebar for usage and explanation of: - Arrays - Stacks - Queues - Linked Lists - Trees - Graphs","title":"Welcome to data-structures-python"},{"location":"array/","text":"\ud83d\udcc4 array.md ```markdown Array The Array class mimics a dynamic list with operations for insertion, deletion, access, and search. Features insert(item) insert_at(index, item) delete(item) delete_at(index) update(index, item) access(index) search(item) get_length() display() Example ```python from data_structures.array import Array arr = Array() arr.insert(5) arr.insert(10) arr.insert_at(1, 7) arr.update(2, 20) arr.display()","title":"Array"},{"location":"array/#arraymd","text":"```markdown","title":"\ud83d\udcc4 array.md"},{"location":"array/#array","text":"The Array class mimics a dynamic list with operations for insertion, deletion, access, and search.","title":"Array"},{"location":"array/#features","text":"insert(item) insert_at(index, item) delete(item) delete_at(index) update(index, item) access(index) search(item) get_length() display()","title":"Features"},{"location":"array/#example","text":"```python from data_structures.array import Array arr = Array() arr.insert(5) arr.insert(10) arr.insert_at(1, 7) arr.update(2, 20) arr.display()","title":"Example"},{"location":"getting-started/","text":"Getting Started \ud83d\udd27 Requirements Python 3.12+ pip \ud83d\udce6 Installation ```bash pip install data-structures-python","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#requirements","text":"Python 3.12+ pip","title":"\ud83d\udd27 Requirements"},{"location":"getting-started/#installation","text":"```bash pip install data-structures-python","title":"\ud83d\udce6 Installation"},{"location":"graph/","text":"\ud83d\udcc4 graph.md ```markdown Graph The Graph class uses an adjacency list to represent connections. Features Add node Add edge Display neighbors Example ```python from data_structures.graph import Graph g = Graph() g.add_node(\"A\") g.add_node(\"B\") g.add_edge(\"A\", \"B\") print(g.graph)","title":"Graph"},{"location":"graph/#graphmd","text":"```markdown","title":"\ud83d\udcc4 graph.md"},{"location":"graph/#graph","text":"The Graph class uses an adjacency list to represent connections.","title":"Graph"},{"location":"graph/#features","text":"Add node Add edge Display neighbors","title":"Features"},{"location":"graph/#example","text":"```python from data_structures.graph import Graph g = Graph() g.add_node(\"A\") g.add_node(\"B\") g.add_edge(\"A\", \"B\") print(g.graph)","title":"Example"},{"location":"linked-list/","text":"\ud83d\udcc4 linked-list.md ```markdown Linked List The LinkedList class supports basic operations using singly or doubly linked nodes. Singly Linked List insertAtBeginning(item) insertAtEnd(item) insertAfter(index, item) deleteItem(item) update(index, item) access(index) search(item) display() Example ```python ll = LinkedList() ll.insertAtBeginning(1) ll.insertAtEnd(3) ll.insertAfter(0, 2) ll.display()","title":"Linked list"},{"location":"linked-list/#linked-listmd","text":"```markdown","title":"\ud83d\udcc4 linked-list.md"},{"location":"linked-list/#linked-list","text":"The LinkedList class supports basic operations using singly or doubly linked nodes.","title":"Linked List"},{"location":"linked-list/#singly-linked-list","text":"insertAtBeginning(item) insertAtEnd(item) insertAfter(index, item) deleteItem(item) update(index, item) access(index) search(item) display()","title":"Singly Linked List"},{"location":"linked-list/#example","text":"```python ll = LinkedList() ll.insertAtBeginning(1) ll.insertAtEnd(3) ll.insertAfter(0, 2) ll.display()","title":"Example"},{"location":"queue/","text":"\ud83d\udcc4 queue.md ```markdown Queue The Queue class follows First-In-First-Out (FIFO) behavior. Operations enqueue(item) dequeue() peek() is_empty() Example ```python from data_structures.queue import Queue q = Queue() q.enqueue(10) q.enqueue(20) print(q.dequeue()) # 10","title":"Queue"},{"location":"queue/#queuemd","text":"```markdown","title":"\ud83d\udcc4 queue.md"},{"location":"queue/#queue","text":"The Queue class follows First-In-First-Out (FIFO) behavior.","title":"Queue"},{"location":"queue/#operations","text":"enqueue(item) dequeue() peek() is_empty()","title":"Operations"},{"location":"queue/#example","text":"```python from data_structures.queue import Queue q = Queue() q.enqueue(10) q.enqueue(20) print(q.dequeue()) # 10","title":"Example"},{"location":"stack/","text":"Stack What is a Stack? A stack is a Last-In-First-Out (LIFO) structure. A Last-In-First-Out (LIFO) structure implemented in two ways: - Using a Python list ( stack.py ) - Using a linked list ( stack_linked.py ) Supported Operations push(item) pop() peek() is_empty() Example ```python from data_structures.stack import Stack s = Stack() s.push(1) s.push(2) print(s.pop())","title":"Stack"},{"location":"stack/#stack","text":"","title":"Stack"},{"location":"stack/#what-is-a-stack","text":"A stack is a Last-In-First-Out (LIFO) structure. A Last-In-First-Out (LIFO) structure implemented in two ways: - Using a Python list ( stack.py ) - Using a linked list ( stack_linked.py )","title":"What is a Stack?"},{"location":"stack/#supported-operations","text":"push(item) pop() peek() is_empty()","title":"Supported Operations"},{"location":"stack/#example","text":"```python from data_structures.stack import Stack s = Stack() s.push(1) s.push(2) print(s.pop())","title":"Example"},{"location":"tree/","text":"\ud83d\udcc4 tree.md ```markdown Binary Search Tree (BST) The BinarySearchTree class organizes nodes such that: - Left < Root < Right - Efficient insert and search (O(log n) average) Operations insert(item) search(item) inorder_traversal() Example ```python from data_structures.tree import BinarySearchTree bst = BinarySearchTree() bst.insert(50) bst.insert(30) bst.insert(70) print(bst.search(30)) print(bst.inorder_traversal())","title":"Tree"},{"location":"tree/#treemd","text":"```markdown","title":"\ud83d\udcc4 tree.md"},{"location":"tree/#binary-search-tree-bst","text":"The BinarySearchTree class organizes nodes such that: - Left < Root < Right - Efficient insert and search (O(log n) average)","title":"Binary Search Tree (BST)"},{"location":"tree/#operations","text":"insert(item) search(item) inorder_traversal()","title":"Operations"},{"location":"tree/#example","text":"```python from data_structures.tree import BinarySearchTree bst = BinarySearchTree() bst.insert(50) bst.insert(30) bst.insert(70) print(bst.search(30)) print(bst.inorder_traversal())","title":"Example"}]}