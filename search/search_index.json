{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Data-Structures-Python A beginner-friendly Python package that implements classic data structures from scratch using object-oriented Python. Designed to help learners understand how data structures work under the hood without relying on Python\u2019s built-in abstractions. Whether you're a coding bootcamp student, computer science learner, or self-taught developer \u2014 this package is for you. Why This Project? Most learners rely on built-in Python data types (lists, sets, dicts) without truly understanding how they work under the hood. While these data types provide convenient abstractions, knowing how to implement core data structures from scratch helps solidify your understanding of programming concepts. This project aims to bridge that gap by providing clear and simple implementations of fundamental data structures. It\u2019s an ideal resource for: Beginners: Anyone learning to code and wants to understand data structures. Bootcamp students: Those preparing for technical interviews. Software engineers: Developers transitioning into fields that require data structure knowledge. \ud83e\udde0 What\u2019s Inside? This package provides detailed implementations and clean interfaces for the following data structures: Data Structure Description \u2705 Array Dynamic array with index-based operations \u2705 Stack LIFO stack implemented using both a Python list and a linked list \u2705 Queue FIFO queue implemented using a list \u2705 Linked List Singly linked list with insert, delete, search, and update operations \u2705 Doubly Linked List Bi-directional traversal with flexible insert/delete \u2705 Binary Search Tree (BST) Recursive insert, search, and in-order traversal for efficient searching \u2705 Graph Undirected graph using an adjacency list to represent connections between node All implementations are self-contained , easy to understand, and extensible for future improvements (e.g., weighted graphs, AVL trees, etc.). \ud83d\ude80 Project Structure The data-structures-python package is organized into several modules and folders: data-structures-python/ Data Structure Description \u2705 data_structures Core package code \u2705 array.py Stack using Python list \u2705 stack_linked.py Stack using Linked List \u2705 queue.py Queue implementation \u2705 linked_list.py Singly Linked List implementation \u2705 doubly_linked_list.py Doubly Linked List implementation \u2705 Graph.py Graph implementation examples / ---------------------- ------------- \u2705 stack_example.ipynb Example showing stack usage \u2705 queue_example.ipynb Example showing queue usage ... Other examples for different data structures README.md / Project overview and documentation ---------------------- ------------- LICENSE / License file for the project ---------------------- ------------- setup.py / Setup script for installing the package ---------------------- ------------- pyproject.toml / Project metadata and configuration \ud83d\ude80 Installation Once the package is published on PyPI (Python Package Index), you can install it using the following command: Once published on PyPI, install using: pip install Olaluwoye-data-structures ## Manual Installation You can also install the package directly from GitHub for development or testing purposes: pip install git+https://github.com/olaluwoye9/data-structures-python.git Example Usage Here\u2019s a simple example of how to use the Array class from the package: 1. Array from data_structures.array import Array arr = Array() # Create a new array arr.insert(10) arr.insert(20) arr.insert(30) print(arr.access(1)) # Access and print an item by index 2. Stack from data_structures.stack import Stack stack = Stack() # Create a new stack stack.push(10) # Push some items to the stack stack.push(20) stack.push(30) print(stack.pop()) # Pop an item from the stack print(stack.peek()) # Peek the top item print(stack.is_empty()) # Check if the stack is empty 3. Queue from data_structures.queue import Queue queue = Queue() # Create a new queue queue.enqueue(10) # Enqueue some items queue.enqueue(20) queue.enqueue(30) print(queue.dequeue()) # Dequeue an item from the queue print(queue.peek()) # Peek the front item print(queue.is_empty()) # Check if the queue is empty 4. Linked List from data_structures.linked_list import LinkedList linked_list = LinkedList() # Create a new linked list linked_list.insert_at_beginning(10) # Insert items at the beginning linked_list.insert_at_beginning(20) linked_list.insert_at_beginning(30) linked_list.display() # Display the linked list linked_list.delete_item(20) # Delete an item linked_list.display() # Display the linked list after deletion print(linked_list.search(10)) # Search for an item 5. Doubly Linked List from data_structures.doubly_linked_list import DoublyLinkedList dll = DoublyLinkedList() # Create a new doubly linked list dll.insert_at_beginning(10) # Insert at the beginning dll.insert_at_beginning(20) dll.display() # Display the doubly linked list dll.insert_at_end(30) # Insert at the end dll.display() # Display after insertion dll.delete_item(10) # Delete an item dll.display() 6. Binary Search Tree (BST) from data_structures.tree import BinarySearchTree bst = BinarySearchTree() # Create a new binary search tree bst.insert(20) # Insert some values bst.insert(10) bst.insert(30) print(bst.search(10)) # Search for a value print(bst.search(25)) bst.inorder_traversal() # In-order traversal 7. Graph from data_structures.graph import Graph graph = Graph() # Create a new graph graph.add_edge('A', 'B') # Add nodes and edges graph.add_edge('A', 'C') graph.add_edge('B', 'D') graph.display() # Display the graph For Other Data Structures: For additional details on Stacks, Queues, Linked Lists, Binary Search Trees, Graphs, and other data structures, please refer to the documentation. The implementation is fully self-contained, and you can easily modify or extend it as needed. Whether you want to create a priority queue, implement an AVL tree, or work with weighted graphs, the package can be extended to meet your requirements. Author Created by: Olalekan T. OLALUWOYE \u2014 MSc; Statistics & Big Data. \ud83d\udce7 Email: oolaluwoye@aimsammi.org, olaluwoye9@gmail.com \ud83d\udd17 LinkedIn: https://www.linkedin.com/in/olaluwoye-olalekan-612a92147 Live Documentation Access the live documentation here: \ud83d\udc49 Live Docs - data-structures-python","title":"Home"},{"location":"#data-structures-python","text":"A beginner-friendly Python package that implements classic data structures from scratch using object-oriented Python. Designed to help learners understand how data structures work under the hood without relying on Python\u2019s built-in abstractions. Whether you're a coding bootcamp student, computer science learner, or self-taught developer \u2014 this package is for you.","title":"Data-Structures-Python"},{"location":"#why-this-project","text":"Most learners rely on built-in Python data types (lists, sets, dicts) without truly understanding how they work under the hood. While these data types provide convenient abstractions, knowing how to implement core data structures from scratch helps solidify your understanding of programming concepts. This project aims to bridge that gap by providing clear and simple implementations of fundamental data structures. It\u2019s an ideal resource for: Beginners: Anyone learning to code and wants to understand data structures. Bootcamp students: Those preparing for technical interviews. Software engineers: Developers transitioning into fields that require data structure knowledge.","title":"Why This Project?"},{"location":"#whats-inside","text":"This package provides detailed implementations and clean interfaces for the following data structures: Data Structure Description \u2705 Array Dynamic array with index-based operations \u2705 Stack LIFO stack implemented using both a Python list and a linked list \u2705 Queue FIFO queue implemented using a list \u2705 Linked List Singly linked list with insert, delete, search, and update operations \u2705 Doubly Linked List Bi-directional traversal with flexible insert/delete \u2705 Binary Search Tree (BST) Recursive insert, search, and in-order traversal for efficient searching \u2705 Graph Undirected graph using an adjacency list to represent connections between node All implementations are self-contained , easy to understand, and extensible for future improvements (e.g., weighted graphs, AVL trees, etc.).","title":"\ud83e\udde0 What\u2019s Inside?"},{"location":"#project-structure","text":"The data-structures-python package is organized into several modules and folders: data-structures-python/ Data Structure Description \u2705 data_structures Core package code \u2705 array.py Stack using Python list \u2705 stack_linked.py Stack using Linked List \u2705 queue.py Queue implementation \u2705 linked_list.py Singly Linked List implementation \u2705 doubly_linked_list.py Doubly Linked List implementation \u2705 Graph.py Graph implementation examples / ---------------------- ------------- \u2705 stack_example.ipynb Example showing stack usage \u2705 queue_example.ipynb Example showing queue usage ... Other examples for different data structures README.md / Project overview and documentation ---------------------- ------------- LICENSE / License file for the project ---------------------- ------------- setup.py / Setup script for installing the package ---------------------- ------------- pyproject.toml / Project metadata and configuration","title":"\ud83d\ude80 Project Structure"},{"location":"#installation","text":"Once the package is published on PyPI (Python Package Index), you can install it using the following command: Once published on PyPI, install using: pip install Olaluwoye-data-structures ## Manual Installation You can also install the package directly from GitHub for development or testing purposes: pip install git+https://github.com/olaluwoye9/data-structures-python.git","title":"\ud83d\ude80 Installation"},{"location":"#example-usage","text":"Here\u2019s a simple example of how to use the Array class from the package: 1. Array from data_structures.array import Array arr = Array() # Create a new array arr.insert(10) arr.insert(20) arr.insert(30) print(arr.access(1)) # Access and print an item by index 2. Stack from data_structures.stack import Stack stack = Stack() # Create a new stack stack.push(10) # Push some items to the stack stack.push(20) stack.push(30) print(stack.pop()) # Pop an item from the stack print(stack.peek()) # Peek the top item print(stack.is_empty()) # Check if the stack is empty 3. Queue from data_structures.queue import Queue queue = Queue() # Create a new queue queue.enqueue(10) # Enqueue some items queue.enqueue(20) queue.enqueue(30) print(queue.dequeue()) # Dequeue an item from the queue print(queue.peek()) # Peek the front item print(queue.is_empty()) # Check if the queue is empty 4. Linked List from data_structures.linked_list import LinkedList linked_list = LinkedList() # Create a new linked list linked_list.insert_at_beginning(10) # Insert items at the beginning linked_list.insert_at_beginning(20) linked_list.insert_at_beginning(30) linked_list.display() # Display the linked list linked_list.delete_item(20) # Delete an item linked_list.display() # Display the linked list after deletion print(linked_list.search(10)) # Search for an item 5. Doubly Linked List from data_structures.doubly_linked_list import DoublyLinkedList dll = DoublyLinkedList() # Create a new doubly linked list dll.insert_at_beginning(10) # Insert at the beginning dll.insert_at_beginning(20) dll.display() # Display the doubly linked list dll.insert_at_end(30) # Insert at the end dll.display() # Display after insertion dll.delete_item(10) # Delete an item dll.display() 6. Binary Search Tree (BST) from data_structures.tree import BinarySearchTree bst = BinarySearchTree() # Create a new binary search tree bst.insert(20) # Insert some values bst.insert(10) bst.insert(30) print(bst.search(10)) # Search for a value print(bst.search(25)) bst.inorder_traversal() # In-order traversal 7. Graph from data_structures.graph import Graph graph = Graph() # Create a new graph graph.add_edge('A', 'B') # Add nodes and edges graph.add_edge('A', 'C') graph.add_edge('B', 'D') graph.display() # Display the graph For Other Data Structures: For additional details on Stacks, Queues, Linked Lists, Binary Search Trees, Graphs, and other data structures, please refer to the documentation. The implementation is fully self-contained, and you can easily modify or extend it as needed. Whether you want to create a priority queue, implement an AVL tree, or work with weighted graphs, the package can be extended to meet your requirements.","title":"Example Usage"},{"location":"#author","text":"Created by: Olalekan T. OLALUWOYE \u2014 MSc; Statistics & Big Data. \ud83d\udce7 Email: oolaluwoye@aimsammi.org, olaluwoye9@gmail.com \ud83d\udd17 LinkedIn: https://www.linkedin.com/in/olaluwoye-olalekan-612a92147","title":"Author"},{"location":"#live-documentation","text":"Access the live documentation here: \ud83d\udc49 Live Docs - data-structures-python","title":"Live Documentation"},{"location":"array/","text":"\ud83d\udcc4 array.md ```markdown Array The Array class mimics a dynamic list with operations for insertion, deletion, access, and search. Features insert(item) insert_at(index, item) delete(item) delete_at(index) update(index, item) access(index) search(item) get_length() display() Example ```python from data_structures.array import Array arr = Array() arr.insert(5) arr.insert(10) arr.insert_at(1, 7) arr.update(2, 20) arr.display()","title":"Array"},{"location":"array/#arraymd","text":"```markdown","title":"\ud83d\udcc4 array.md"},{"location":"array/#array","text":"The Array class mimics a dynamic list with operations for insertion, deletion, access, and search.","title":"Array"},{"location":"array/#features","text":"insert(item) insert_at(index, item) delete(item) delete_at(index) update(index, item) access(index) search(item) get_length() display()","title":"Features"},{"location":"array/#example","text":"```python from data_structures.array import Array arr = Array() arr.insert(5) arr.insert(10) arr.insert_at(1, 7) arr.update(2, 20) arr.display()","title":"Example"},{"location":"getting-started/","text":"Getting Started \ud83d\udd27 Requirements Python 3.12+ pip \ud83d\udce6 Installation ```bash pip install data-structures-python","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#requirements","text":"Python 3.12+ pip","title":"\ud83d\udd27 Requirements"},{"location":"getting-started/#installation","text":"```bash pip install data-structures-python","title":"\ud83d\udce6 Installation"},{"location":"graph/","text":"\ud83d\udcc4 graph.md ```markdown Graph The Graph class uses an adjacency list to represent connections. Features Add node Add edge Display neighbors Example ```python from data_structures.graph import Graph g = Graph() g.add_node(\"A\") g.add_node(\"B\") g.add_edge(\"A\", \"B\") print(g.graph)","title":"Graph"},{"location":"graph/#graphmd","text":"```markdown","title":"\ud83d\udcc4 graph.md"},{"location":"graph/#graph","text":"The Graph class uses an adjacency list to represent connections.","title":"Graph"},{"location":"graph/#features","text":"Add node Add edge Display neighbors","title":"Features"},{"location":"graph/#example","text":"```python from data_structures.graph import Graph g = Graph() g.add_node(\"A\") g.add_node(\"B\") g.add_edge(\"A\", \"B\") print(g.graph)","title":"Example"},{"location":"linked-list/","text":"\ud83d\udcc4 linked-list.md ```markdown Linked List The LinkedList class supports basic operations using singly or doubly linked nodes. Singly Linked List insertAtBeginning(item) insertAtEnd(item) insertAfter(index, item) deleteItem(item) update(index, item) access(index) search(item) display() Example ```python ll = LinkedList() ll.insertAtBeginning(1) ll.insertAtEnd(3) ll.insertAfter(0, 2) ll.display()","title":"Linked list"},{"location":"linked-list/#linked-listmd","text":"```markdown","title":"\ud83d\udcc4 linked-list.md"},{"location":"linked-list/#linked-list","text":"The LinkedList class supports basic operations using singly or doubly linked nodes.","title":"Linked List"},{"location":"linked-list/#singly-linked-list","text":"insertAtBeginning(item) insertAtEnd(item) insertAfter(index, item) deleteItem(item) update(index, item) access(index) search(item) display()","title":"Singly Linked List"},{"location":"linked-list/#example","text":"```python ll = LinkedList() ll.insertAtBeginning(1) ll.insertAtEnd(3) ll.insertAfter(0, 2) ll.display()","title":"Example"},{"location":"queue/","text":"\ud83d\udcc4 queue.md ```markdown Queue The Queue class follows First-In-First-Out (FIFO) behavior. Operations enqueue(item) dequeue() peek() is_empty() Example ```python from data_structures.queue import Queue q = Queue() q.enqueue(10) q.enqueue(20) print(q.dequeue())","title":"Queue"},{"location":"queue/#queuemd","text":"```markdown","title":"\ud83d\udcc4 queue.md"},{"location":"queue/#queue","text":"The Queue class follows First-In-First-Out (FIFO) behavior.","title":"Queue"},{"location":"queue/#operations","text":"enqueue(item) dequeue() peek() is_empty()","title":"Operations"},{"location":"queue/#example","text":"```python from data_structures.queue import Queue q = Queue() q.enqueue(10) q.enqueue(20) print(q.dequeue())","title":"Example"},{"location":"stack/","text":"Stack What is a Stack? A stack is a Last-In-First-Out (LIFO) structure. A Last-In-First-Out (LIFO) structure implemented in two ways: - Using a Python list ( stack.py ) - Using a linked list ( stack_linked.py ) Supported Operations push(item) pop() peek() is_empty() Example ```python from data_structures.stack import Stack s = Stack() s.push(1) s.push(2) print(s.pop())","title":"Stack"},{"location":"stack/#stack","text":"","title":"Stack"},{"location":"stack/#what-is-a-stack","text":"A stack is a Last-In-First-Out (LIFO) structure. A Last-In-First-Out (LIFO) structure implemented in two ways: - Using a Python list ( stack.py ) - Using a linked list ( stack_linked.py )","title":"What is a Stack?"},{"location":"stack/#supported-operations","text":"push(item) pop() peek() is_empty()","title":"Supported Operations"},{"location":"stack/#example","text":"```python from data_structures.stack import Stack s = Stack() s.push(1) s.push(2) print(s.pop())","title":"Example"},{"location":"tree/","text":"\ud83d\udcc4 tree.md ```markdown Binary Search Tree (BST) The BinarySearchTree class organizes nodes such that: - Left < Root < Right - Efficient insert and search (O(log n) average) Operations insert(item) search(item) inorder_traversal() Example ```python from data_structures.tree import BinarySearchTree bst = BinarySearchTree() bst.insert(50) bst.insert(30) bst.insert(70) print(bst.search(30)) print(bst.inorder_traversal())","title":"Tree"},{"location":"tree/#treemd","text":"```markdown","title":"\ud83d\udcc4 tree.md"},{"location":"tree/#binary-search-tree-bst","text":"The BinarySearchTree class organizes nodes such that: - Left < Root < Right - Efficient insert and search (O(log n) average)","title":"Binary Search Tree (BST)"},{"location":"tree/#operations","text":"insert(item) search(item) inorder_traversal()","title":"Operations"},{"location":"tree/#example","text":"```python from data_structures.tree import BinarySearchTree bst = BinarySearchTree() bst.insert(50) bst.insert(30) bst.insert(70) print(bst.search(30)) print(bst.inorder_traversal())","title":"Example"}]}